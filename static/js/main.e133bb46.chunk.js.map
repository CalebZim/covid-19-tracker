{"version":3,"sources":["Collapsible.js","App.js","serviceWorker.js","index.js"],"names":["Collapsible","props","state","isExpanded","e","preventDefault","this","setState","height","refs","inner","clientHeight","title","total","NewCases","code","TotalRecovered","date","deaths","class","src","alt","React","Component","App","isLoading","contacts","localStorage","getItem","JSON","parse","contactsDate","Date","parseInt","now","dataAge","Math","round","fetchData","console","log","fetch","then","response","json","parsedJSON","Countries","map","user","name","Country","totalCases","TotalConfirmed","NewConfirmed","CountryCode","TotalDeaths","catch","error","nextProps","nextState","setItem","stringify","className","onClick","length","contact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e133bb46.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Collapsible extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isExpanded: false\r\n        }\r\n    }\r\n\r\n    handleToggle(e){\r\n        e.preventDefault();\r\n        this.setState({\r\n            isExpanded: !this.state.isExpanded,\r\n            height: this.refs.inner.clientHeight\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {title, total, NewCases, code, TotalRecovered, date, deaths} = this.props;\r\n        return (\r\n            <article class=\"bg-white br3 pa3 pa4-ns mv3 ba b--black-10 fl w-25 pa2 card\">\r\n                <div class=\"tc\">\r\n                <img src={`https://www.countryflags.io/${code}/flat/64.png`} class=\"br-100 h3 w3 dib ba b--black-05 pa2\" title={`${title}'s flag`} alt={`${title}'s flag`}></img>\r\n                    <h1 class=\"f4\">{title}</h1>\r\n                    <hr class=\"mw3 bb bw1 b--black-10\" />\r\n                </div>\r\n                <p class=\"lh-copy measure center tc f6 black-70\">\r\n                {`Total Confirmed ${total}`}<br />\r\n                {`New Cases Confirmed: ${NewCases}`}<br />\r\n                {`Total Deaths: ${deaths}`}<br />\r\n                {`Total Recovered: ${TotalRecovered}`}<br />\r\n                {`Last Updated: ${date}`}\r\n                </p>\r\n            </article>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nCollapsible.propTypes = {\r\n    title: PropTypes.string,\r\n    total: PropTypes.number,\r\n    NewCases: PropTypes.number,\r\n    code: PropTypes.string,\r\n    TotalRecovered: PropTypes.number,\r\n    date: PropTypes.string,\r\n    deaths: PropTypes.number,\r\n};\r\n\r\nexport default Collapsible;","import React from 'react';\nimport Collapsible from './Collapsible';\nimport './Tachyons.css'\nimport './App.css'\n\nclass App extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading: true,\n            contacts: []\n        }\n    }\n\n    \n    componentWillMount() {\n        localStorage.getItem('contacts') && this.setState({\n            contacts: JSON.parse(localStorage.getItem('contacts')),\n            isLoading: false\n        })\n    }\n    \n\n    componentDidMount(){\n\n        const date = localStorage.getItem('contactsDate');\n        const contactsDate = date && new Date(parseInt(date));\n        const now = new Date();\n\n        const dataAge = Math.round((now - contactsDate) / (1000 * 60)); // in minutes\n        const tooOld = dataAge >= 1;\n\n        if(tooOld){\n            this.fetchData();            \n        } else {\n            console.log(`Using data from localStorage that are ${dataAge} minutes old.`);\n        }\n\n    }\n\n    fetchData(){\n\n        this.setState({\n            isLoading: true,\n            contacts: []\n        })\n\n        fetch('https://api.covid19api.com/summary')\n        .then(response => response.json())\n        .then(parsedJSON => parsedJSON.Countries.map(user => (\n            {\n                name: `${user.Country}`,\n                totalCases: `${user.TotalConfirmed}`,\n                NewConfirmed: `${user.NewConfirmed}`,\n                code: `${user.CountryCode}`,\n                TotalRecovered: `${user.TotalRecovered}`,\n                date: `${user.Date}`,\n                deaths: `${user.TotalDeaths}`,\n            }\n        )))\n        .then(contacts => this.setState({\n            contacts,\n            isLoading: false\n        }))\n        .catch(error => console.log('parsing failed', error))\n        \n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        localStorage.setItem('contacts', JSON.stringify(nextState.contacts));\n        localStorage.setItem('contactsDate', Date.now());\n    }\n    \n\n    render() {\n        const {isLoading, contacts} = this.state;\n        return (\n            <div>\n                <header>\n                    <h1>Covid 19 Tracker <br /> <br /><button className='button' onClick={(e) => {\n                        this.fetchData();    \n                    }}>Refresh</button></h1>\n                </header>\n                <div className={`content ${isLoading ? 'is-loading' : ''}`}>\n                    <div className=\"panel-group\">\n                        {\n                            !isLoading && contacts.length > 0 ? contacts.map(contact => {\n                                const {name, totalCases, NewConfirmed, code, TotalRecovered, date, deaths } = contact;\n                                return <Collapsible deaths={deaths} title={name} total={totalCases} NewCases={NewConfirmed} code={code} TotalRecovered={TotalRecovered} date={date}>\n                                </Collapsible>\n                            }) : null\n                        }\n                    </div>\n                    <div className=\"loader\">\n                        <div className=\"icon\"></div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}